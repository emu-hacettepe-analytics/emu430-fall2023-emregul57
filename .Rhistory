} else {
print("No state has murder rate that low")
}
ind <- which.min(murder_rate)
if (murder_rate[ind]< 0.5 ){
print(murder$state[ind])
} else {
print("No state has murder rate that low")
}
library(dslabs)
data(murders)
murder_rate <- (murders$total/murders$population)*100000
#If the murder rate of the state with the lowest murder rate is lower than 0.5,
#print the name of that state.
ind <- which.min(murder_rate)
if (murder_rate[ind]< 0.5 ){
print(murders$state[ind])
} else {
print("No state has murder rate that low")
}
ind <- which.min(murder_rate)
if (murder_rate[ind]< 0.25 ){
print(murders$state[ind])
} else {
print("No state has murder rate that low")
}
x <- c(1, 2, NA, 4, NA)
is.na(x)
sum(is.na(x))
no_nas <- ifelse(is.na(x),0,x)
print(no_nas)
no_nas <- ifelse(is.na(x),0,x)
no_nas
identical(5,5)
identical(4,5)
x <- c(1, 2, 3, 4, 5)
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
x <- c(1, 2, 3, 4, 5)
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
avg
x <- c(1, 2, 3, 4, 5)
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
avg
x <- c(1, 2, 3, 4, 5)
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
print(avg)
x <- 1:5
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
print(avg)
x <- 1:5
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
avg
print(avg)
x <- 1:5
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
avg(x)
x <- c(1, 2, 3, 4, 5)
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
avg(x)
my_function <- function() {
a <- 10
print(a)
}
my_function()
# Burada 'a' değişkeni my_function fonksiyonunun içinde tanımlandı.
print(a)
my_function <- function() {
a <- 10
print(a)
}
my_function()
calculate_rect_area <- function(width, height) {
return(width * height) # Dikdörtgenin alanını hesapla ve bu değeri döndür
}
calculate_rect_area <- function(width, height) {
return(width * height) # Dikdörtgenin alanını hesapla ve bu değeri döndür
}
calculate_rect_area(5,10)
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
calculate_rect_area(5,10)
# Version 2: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
calculate_rect_area(5,10)
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
calculate_rect_area(5,10)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
calculate_rect_area(5,10)
calculate_rect_area(5,10)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
calculate_rect_area(5,10)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
calculate_rect_area(5,10)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
area
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
width <- 5
height <- 10
calculate_rect_area()
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
width <- 5
height <- 10
calculate_rect_area(width, height)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
}
calculate_rect_area(5, 10)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
}
calculate_rect_area(5, 10)
print(area)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
}
print(calculate_rect_area(5, 10))
print(area)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
print(calculate_rect_area(5, 10))
print(area)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
print(calculate_rect_area(5, 10))
print(area)
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
width <- 5
height <- 10
alan <- calculate_rect_area(width, height)
print(alan)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
return(width * height) # return a specific result
}
calculate_rect_area(5,10)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
return(width * height) # return a specific result
}
sonuc <- calculate_rect_area(5,10)
print(sonuc)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
calculate_rect_area(5,10)
calculate_rect_area(5,10)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
calculate_rect_area(5,10)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
x <- (5,10)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
x <- (5,10)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
x <- c(5,10)
calculate_rect_area(x)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
x <- c(5,10)
calculate_rect_area(x)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
width <- 5
height <- 10
calculate_rect_area(width, height)
# Version 1: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
return(width * height) # return a specific result
}
width <- 5
height <- 10
calculate_rect_area(width, height)
# Version 2: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
# Version 2: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
# Version 2: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
width * height # return a specific result
}
width <- 5
height <- 10
calculate_rect_area(width, height)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
width <- 5
height <- 10
calculate_rect_area(width, height)
# Version 3: A function to calculate the area of a rectangle
calculate_rect_area <- function(width, height){
area <- width * height # calculate area
area
}
width <- 5
height <- 10
calculate_rect_area(width, height)
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
compute_s_n(3)
s_n <- vector(length = m)
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
s_n
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
compute_s_n
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
s_n(3
m <- 25
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
s_n(3)
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
lines(n, n*(n+1)/2)
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
lines(n, n*(n+1)/2)
m <- 25
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
m <- 25
# create an empty vector
s_n <- vector(length = m)
for (i in 1:m){
s_n[i] <- compute_s_n(i)
}
sapply(1:m, compute_s_n)
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
m <- 25
# create an empty vector
sapply(1:m, compute_s_n)
n <- 430
while (n > 0){
print(n)
n<- n- 50
}
sapply(1:4, sqrt)
source("~/.active-rstudio-document", echo=TRUE)
library(dslabs)
data(murders)
head(heights)
library(dslabs)
data(murders)
head(heights)
prop.table(table(heights$sex))
library(dslabs)
data(murders)
head(heights)
prop.table(table(murders$heights))
library(dslabs)
data(murders)
head(heights)
str(murders)
library(dslabs)
data(murders)
head(heights)
library(dslabs)
data(murders)
head(heights)
prop.table(table(heights$sex))
library(dslabs)
data(murders)
head(heights)
head(sex)
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
c(average = average, sd=sd)
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
c(average = average, sd=sd)
sum(abs(z) < 2)
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
c(average = average, sd=sd)
sum(abs(z) < 2)
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
# assume x is a vector
average <- sum(x) / length(x)
sd <- sqrt( sum( (x-average)^2) / length(x))
library(dslabs)
data("heights")
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
c(average = average, sd=sd)
print(average)
print(sd)
data("heights")
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
c(average = average, sd=sd)
print(average)
print(sd)
index <- heights$sex == "Male“
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
c(average = average, sd=sd)
print(average)
index <- heights$sex == "Male“
library(dslabs)
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
#c(average = average, sd=sd)
print(average)
library(dslabs)
data("heights")
library(dslabs)
data("heights")
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
print(average)
library(dslabs)
data(heights)
index <- heights$sex == "Male“
library(dslabs)
data(heights)
index <- heights$sex == "Male“
x <- heights$height[index]
average <- mean(x)
sd <- sd(x)
print(average)
#| code-fold: true
#| code-summary: "Show the code"
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
#| code-fold: true
#| code-summary: "Show the code"
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
